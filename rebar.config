%% Erlang compiler options
{erl_opts, [debug_info]}.

%% elixir support
% {deps, [{ rebar_elixir_plugin, ".*", {git, "git://github.com/yrashk/rebar_elixir_plugin"} },
%        { elixir, "1.1.*", {git, "git://github.com/elixir-lang/elixir"} },
%        { ranch, ".*", {git, "git://github.com/ninenines/ranch.git"} } ]}.

{deps, [
        % { rabbitmq_erlang_client, ".*", {git, "https://github.com/rabbitmq/rabbitmq-erlang-client.git"}, [raw] },
        % { rabbitmq_common, ".*", {git, "https://github.com/rabbitmq/rabbitmq-common.git"}, [raw] },
        { amqp_client, ".*", {git, "https://github.com/jbrisbin/amqp_client.git" }},
        { protobuffs, ".*", {git, "https://github.com/basho/erlang_protobuffs.git"} }
        ]}.

%% Let rebar know about the new plugins
% {plugins, [rebar_elixir_compiler, rebar_exunit] }.

{eunit_opts, [debug_info]}.

% {lib_dirs, [
%   "deps/elixir/lib"
% ]}.

{lib_dirs, [ "libs", "deps/amqp_client/include" ]}.

% {port_specs, [{"priv/fix_splitter44.so",    ["c_src/44/*.c"]},
%              {"priv/fix_splitter44_xp.so", ["c_src/44_xp/*.c"]}]}.

% {port_env, [{".*", "CFLAGS", "$CFLAGS -Ic_src -g -Wall -O2"}]}.

% {port_env, [
%     {"darwin", "CFLAGS", "$CFLAGS -Ic_src -g -Wall -O2"},

    %% add MS Visual C++ support to rebar on Windows
%     {"win32", "CC", "cl.exe"},
%     {"win32", "CXX", "cl.exe"},
%     {"win32", "LINKER", "link.exe"},

%     {"win32", "DRV_CXX_TEMPLATE",
%      "$CXX /c $CXXFLAGS $DRV_CFLAGS $PORT_IN_FILES /Fo$PORT_OUT_FILE"},
%     {"win32", "DRV_CC_TEMPLATE",
%      "$CC /c $CFLAGS $DRV_CFLAGS $PORT_IN_FILES /Fo$PORT_OUT_FILE"},
%     {"win32", "DRV_LINK_TEMPLATE",
%      "$LINKER $PORT_IN_FILES $LDFLAGS $DRV_LDFLAGS /OUT:$PORT_OUT_FILE"},

 %    {"win32", "EXE_CXX_TEMPLATE",
 %     "$CXX /c $CXXFLAGS $EXE_CFLAGS $PORT_IN_FILES /Fo$PORT_OUT_FILE"},
  %   {"win32", "EXE_CC_TEMPLATE",
%      "$CC /c $CFLAGS $EXE_CFLAGS $PORT_IN_FILES /Fo$PORT_OUT_FILE"},
 %    {"win32", "EXE_LINK_TEMPLATE",
 %     "$LINKER $PORT_IN_FILES $LDFLAGS $EXE_LDFLAGS /OUT:$PORT_OUT_FILE"},

    %% ERL_CFLAGS are ok as -I even though strictly it should be /I
    % {"win32", "ERL_LDFLAGS", " /LIBPATH:$ERL_EI_LIBDIR erl_interface.lib ei.lib"},
    % {"win32", "DRV_CFLAGS", "/Zi /Wall $ERL_CFLAGS"},
    % {"win32", "DRV_LDFLAGS", "/DLL $ERL_LDFLAGS"}
    %% app-specific flags would go here
% ]}.

% protobuffs_compile:scan_file("include/receiver.proto").
% protobuffs_compile:generate_source("include/receiver.proto").
% {post_hooks, [{compile, "erl -noshell -pa deps/protobuffs/ebin -eval \"protobuffs_compile:scan_file(\"include/receiver.proto\").\" "}]}.
